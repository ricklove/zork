define(
  cevent,
  (tick
    app
    flg
    name
    "AUX"
    (obl
      get(
        initial,
        oblist))
    atm),
  #decl
    ((tick)
      fix
      (app)
      or(
        applicable,
        offset)
      (flg)
      or(
        atom,
        false)
      (name)
      or(
        atom,
        string)
      (atm)
      or(
        atom,
        false)),
  cond(
    (type_Q(
        _name,
        string)
      cond(
        (set(
            atm,
            lookup(
              _name,
              _obl))),
        (t
          set(
            atm,
            insert(
              _name,
              _obl))))),
    (set(
        atm,
        _name))),
  GLOBALS._atm = chtype(
      [_tick
        _app
        _flg
        _atm],
      cevent))

define(
  cons_obj,
  ("TUPLE"
    objs
    "AUX"
    (winner
      GLOBALS.winner)),
  #decl
    ((objs)
      tuple(
        [rest
          string])
      (winner)
      adv),
  mapf(
    null,
    function(
      (x
        "AUX"
        (y
          find_obj(
            _x))),
      #decl
        ((y)
          object),
      or(
        memq(
          _y,
          aobjs(
            _winner)),
        take_object(
          find_obj(
            _x),
          _winner))),
    _objs))

define(
  cexit,
  (flid
    rmid
    "OPTIONAL"
    (str
      null)
    (flag
      null)
    (funct
      null)
    "AUX"
    (fval
      null)
    atm),
  #decl
    ((str)
      or(
        false,
        string)
      (flid
        rmid)
      or(
        atom,
        string)
      (atm
        funct)
      or(
        atom,
        false)
      (fval)
      or(
        applicable,
        false)
      (flag)
      or(
        atom,
        false)),
  cond(
    (type_Q(
        _flid,
        atom)
      set(
        flid,
        spname(
          _flid)))),
  set(
    atm,
    or(
      lookup(
        _flid,
        get(
          flag,
          oblist)),
      insert(
        _flid,
        get(
          flag,
          oblist)))),
  GLOBALS._atm = _flag,
  chtype(
    vector(
      _atm,
      find_room(
        _rmid),
      _str,
      _funct),
    cexit))

define(
  exit,
  ("TUPLE"
    pairs
    "AUX"
    (dobl
      GLOBALS.directions)
    (frob
      ivector(
        length(
          _pairs)))),
  #decl
    ((pairs)
      tuple(
        [rest
          string
          or(
            nexit,
            cexit,
            string,
            atom)])
      (dir)
      list(
        [rest
          atom])
      (frob)
      vector
      (dobl)
      oblist),
  repeat(
    (atm
      rm
      (f
        _frob)),
    #decl
      ((atm)
        or(
          atom,
          false)
        (rm)
        or(
          room,
          false)
        (f)
        vector),
    cond(
      (or(
          and(
            set(
              atm,
              lookup(
                1(
                  _pairs),
                _dobl)),
            gassigned_Q(
              _atm),
            type_Q(
              GLOBALS._atm,
              direction)))
        put(
          _f,
          1,
          _atm)
        cond(
          (type_Q(
              2(
                _pairs),
              string)
            put(
              _f,
              2,
              find_room(
                2(
                  _pairs)))),
          (put(
              _f,
              2,
              2(
                _pairs))))
        set(
          f,
          rest(
            _f,
            2))),
      (t
        put(
          _pairs,
          1,
          error(
            illegal_direction,
            1(
              _pairs))))),
    cond(
      (empty_Q(
          set(
            pairs,
            rest(
              _pairs,
              2)))
        return(
          )))),
  chtype(
    _frob,
    exit))

define(
  room,
  (id
    d1
    d2
    lit_Q
    ex
    "OPTIONAL"
    (objs
      ())
    (app
      null)
    (val
      0)
    (bit
      GLOBALS.rlandbit)
    "AUX"
    (rm
      find_room(
        _id))),
  #decl
    ((id)
      or(
        string,
        atom)
      (d1
        d2)
      string
      (lit_Q)
      or(
        atom,
        form,
        false)
      (ex)
      exit
      (app)
      or(
        form,
        false,
        atom)
      (val
        bit)
      fix
      (rm)
      room),
  GLOBALS.score_max = _(
      GLOBALS.score_max,
      _val),
  put(
    _rm,
    GLOBALS.rbits,
    _bit),
  put(
    _rm,
    GLOBALS.rval,
    _val),
  put(
    _rm,
    GLOBALS.robjs,
    _objs),
  put(
    _rm,
    GLOBALS.rdesc1,
    _d1),
  put(
    _rm,
    GLOBALS.rdesc2,
    _d2),
  put(
    _rm,
    GLOBALS.rexits,
    _ex),
  put(
    _rm,
    GLOBALS.raction,
    cond(
      (type_Q(
          _app,
          false,
          form)
        null),
      (_app))),
  put(
    _rm,
    GLOBALS.rlight_Q,
    cond(
      (type_Q(
          _lit_Q,
          form)
        null),
      (t
        _lit_Q))),
  mapf(
    null,
    function(
      (x),
      #decl
        ((x)
          object),
      put(
        _x,
        GLOBALS.oroom,
        _rm)),
    robjs(
      _rm)),
  _rm)

define(
  sobject,
  (id
    str
    "TUPLE"
    tup),
  #decl
    ((id)
      string
      (tup)
      tuple),
  object(
    _id,
    "",
    _str,
    %null,
    null,
    (),
    null,
    _(
      _X_tup)))

define(
  aobject,
  (id
    str
    app
    "TUPLE"
    tup),
  #decl
    ((id)
      string
      (tup)
      tuple
      (app)
      atom),
  object(
    _id,
    "",
    _str,
    %null,
    _app,
    (),
    null,
    _(
      _X_tup)))

define(
  object,
  (id
    desc1
    desc2
    desco
    app
    conts
    can
    flags
    "OPTIONAL"
    (light_Q
      0)
    (s1
      0)
    (s2
      0)
    (size
      5)
    (capac
      0)),
  #decl
    ((id)
      or(
        atom,
        string)
      (desc1
        desc2)
      string
      (app)
      or(
        false,
        form,
        atom)
      (conts)
      list(
        [rest
          object])
      (can)
      or(
        false,
        object)
      (flags)
      primtype(
        word)
      (size
        capac)
      fix
      (light_Q
        s1
        s2)
      fix
      (desco)
      or(
        string,
        false)),
  GLOBALS.score_max = _(
      GLOBALS.score_max,
      _s1,
      _s2),
  or(
    0_Q(
      _light_Q),
    set(
      flags,
      _(
        _flags,
        GLOBALS.lightbit))),
  put(
    put(
      put(
        put(
          put(
            put(
              put(
                put(
                  put(
                    put(
                      put(
                        put(
                          find_obj(
                            _id),
                          GLOBALS.odesc1,
                          _desc1),
                        GLOBALS.ocapac,
                        _capac),
                      GLOBALS.osize,
                      _size),
                    GLOBALS.odesco,
                    _desco),
                  GLOBALS.olight_Q,
                  _light_Q),
                GLOBALS.oflags,
                _flags),
              GLOBALS.ofval,
              _s1),
            GLOBALS.otval,
            _s2),
          GLOBALS.ocan,
          _can),
        GLOBALS.ocontents,
        _conts),
      GLOBALS.odesc2,
      _desc2),
    GLOBALS.oaction,
    cond(
      (type_Q(
          _app,
          false,
          form)
        null),
      (_app))))

define(
  find_prep,
  (str
    "AUX"
    (atm
      add_word(
        _str))),
  #decl
    ((str)
      string
      (atm)
      or(
        false,
        atom)),
  cond(
    (gassigned_Q(
        _atm)
      cond(
        (type_Q(
            GLOBALS._atm,
            prep)
          GLOBALS._atm),
        (error(
            no_prep_X_errors)))),
    (GLOBALS._atm = chtype(
          _atm,
          prep))))

define(
  add_action,
  (nam
    str
    "TUPLE"
    decl
    "AUX"
    (atm
      or(
        lookup(
          _nam,
          GLOBALS.actions),
        insert(
          _nam,
          GLOBALS.actions)))),
  #decl
    ((nam
        str)
      string
      (decl)
      tuple(
        [rest
          vector])
      (atm)
      atom),
  GLOBALS._atm = chtype(
      [_atm
        make_action(
          _X_decl)
        _str],
      action),
  _atm)

define(
  add_directions,
  ("TUPLE"
    nms
    "AUX"
    (dir
      GLOBALS.directions)
    atm),
  #decl
    ((nms)
      tuple(
        [rest
          string])
      (dir)
      oblist
      (atm)
      atom),
  mapf(
    null,
    /* FUNCTION */
      (x) => (
      setg,
      set(
          atm,
          or(
            lookup(
              _x,
              _dir),
            insert(
              _x,
              _dir))),
      chtype(
          _atm,
          direction)),
    _nms))

define(
  dsynonym,
  (str
    "TUPLE"
    nms
    "AUX"
    val
    (dir
      GLOBALS.directions)
    atm),
  #decl
    ((atm)
      atom
      (str)
      string
      (nms)
      tuple(
        [rest
          string])
      (val)
      direction
      (dir)
      oblist),
  set(
    val,
    add_directions(
      _str)),
  mapf(
    null,
    /* FUNCTION */
      (x) => (
      setg,
      set(
          atm,
          or(
            lookup(
              _x,
              _dir),
            insert(
              _x,
              _dir))),
      _val),
    _nms))

define(
  vsynonym,
  (n1
    "TUPLE"
    n2
    "AUX"
    atm
    val),
  #decl
    ((n1)
      string
      (n2)
      tuple(
        [rest
          string])
      (atm)
      or(
        false,
        atom)
      (val)
      any),
  cond(
    (set(
        atm,
        lookup(
          _n1,
          GLOBALS.words))
      set(
        val,
        GLOBALS._atm)
      mapf(
        null,
        /* FUNCTION */
          (x) => (
          setg,
          add_word(
              _x),
          _val),
        _n2))),
  cond(
    (set(
        atm,
        lookup(
          _n1,
          GLOBALS.actions))
      set(
        val,
        GLOBALS._atm)
      mapf(
        null,
        /* FUNCTION */
          (x) => (
          setg,
          or(
              lookup(
                _x,
                GLOBALS.actions),
              insert(
                _x,
                GLOBALS.actions)),
          _val),
        _n2))))

"STUFF FOR ADDING TO VOCABULARY, ADDING TO LISTS (OF DEMONS, FOR EXAMPLE)."

define(
  add_word,
  (w),
  #decl
    ((w)
      string),
  or(
    lookup(
      _w,
      GLOBALS.words),
    insert(
      _w,
      GLOBALS.words)))

define(
  add_buzz,
  ("TUPLE"
    w),
  #decl
    ((w)
      tuple(
        [rest
          string])),
  mapf(
    null,
    function(
      (x),
      #decl
        ((x)
          string),
      setg(
        add_word(
          _x),
        chtype(
          _x,
          buzz))),
    _w))

define(
  add_zork,
  (nm
    "TUPLE"
    w),
  #decl
    ((nm)
      atom
      (w)
      tuple(
        [rest
          string])),
  mapf(
    null,
    function(
      (x
        "AUX"
        atm),
      #decl
        ((x)
          string
          (atm)
          atom),
      setg(
        set(
          atm,
          add_word(
            _x)),
        chtype(
          _atm,
          _nm))),
    _w))

define(
  add_object,
  (obj
    names
    "OPTIONAL"
    (adj
      () => [])
    "AUX"
    (objs
      GLOBALS.object_obl)),
  #decl
    ((obj)
      object
      (names
        adj)
      vector(
        [rest
          string])
      (objs)
      oblist),
  put(
    _obj,
    GLOBALS.onames,
    mapf(
      GLOBALS.uvector,
      function(
        (x),
        #decl
          ((x)
            string),
        or(
          lookup(
            _x,
            _objs),
          insert(
            _x,
            _objs))),
      _names)),
  put(
    _obj,
    GLOBALS.oadjs,
    mapf(
      GLOBALS.uvector,
      /* FUNCTION */
        (w) => (
        add_zork,
        adjective,
        _w),
      _adj)),
  chutype(
    oadjs(
      _obj),
    adjective),
  _obj)

define(
  synonym,
  (n1
    "TUPLE"
    n2
    "AUX"
    atm
    val),
  #decl
    ((n1)
      string
      (n2)
      tuple(
        [rest
          string])
      (atm)
      or(
        false,
        atom)
      (val)
      any),
  cond(
    (set(
        atm,
        lookup(
          _n1,
          GLOBALS.words))
      set(
        val,
        GLOBALS._atm)
      mapf(
        null,
        /* FUNCTION */
          (x) => (
          setg,
          add_word(
              _x),
          _val),
        _n2))))

define(
  add_abbrev,
  (x
    y
    "AUX"),
  #decl
    ((x
        y)
      string),
  setg(
    add_word(
      _x),
    or(
      lookup(
        _y,
        GLOBALS.words),
      insert(
        _y,
        GLOBALS.words))))

define(
  add_demon,
  (x),
  #decl
    ((x)
      hack),
  cond(
    (mapr(
        null,
        function(
          (y),
          #decl
            ((y)
              list(
                [rest
                  hack])),
          cond(
            (_EQ_Q(
                haction(
                  1(
                    _y)),
                haction(
                  _x))
              put(
                _y,
                1,
                _x)
              mapleave(
                t)))),
        GLOBALS.demons)),
    (GLOBALS.demons = (_x
          _X
          GLOBALS.demons))))

define(
  add_star,
  (obj),
  GLOBALS.stars = (_obj
      _X
      GLOBALS.stars))

define(
  add_actor,
  (adv
    "AUX"
    (actors
      GLOBALS.actors)),
  #decl
    ((adv)
      adv
      (actors)
      list(
        [rest
          adv])),
  cond(
    (mapf(
        null,
        function(
          (x),
          #decl
            ((x)
              adv),
          cond(
            (_EQ_Q(
                aobj(
                  _x),
                aobj(
                  _adv))
              mapleave(
                t)))),
        _actors)),
    (GLOBALS.actors = (_adv
          _X_actors))),
  _adv)

define(
  add_desc,
  (obj
    str),
  #decl
    ((obj)
      object
      (str)
      string),
  put(
    _obj,
    GLOBALS.oread,
    _str))

define(
  sadd_action,
  (str1
    atm),
  add_action(
    _str1,
    "",
    [[_str1
        _atm]]))

define(
  1add_action,
  (str1
    str2
    atm),
  add_action(
    _str1,
    _str2,
    [obj
      [_str1
        _atm]]))

define(
  aadd_action,
  (str1
    str2
    atm),
  add_action(
    _str1,
    _str2,
    [(_1
        aobjs
        no_take)
      [_str1
        _atm]]))